#include "DxgiMessageMap.h"
#include <string>
#include <sstream>
#include <iomanip>

#define REGISTER_MESSAGE(msg){msg,#msg}

DxgiMessageMap::DxgiMessageMap()
	:
	map({
		REGISTER_MESSAGE(DXGI_ERROR_ACCESS_DENIED),
		REGISTER_MESSAGE(DXGI_ERROR_ACCESS_LOST),
		REGISTER_MESSAGE(DXGI_ERROR_ALREADY_EXISTS),
		REGISTER_MESSAGE(DXGI_ERROR_CANNOT_PROTECT_CONTENT),
		REGISTER_MESSAGE(DXGI_ERROR_DEVICE_HUNG),
		REGISTER_MESSAGE(DXGI_ERROR_DEVICE_REMOVED),
		REGISTER_MESSAGE(DXGI_ERROR_DEVICE_RESET),
		REGISTER_MESSAGE(DXGI_ERROR_DRIVER_INTERNAL_ERROR),
		REGISTER_MESSAGE(DXGI_ERROR_FRAME_STATISTICS_DISJOINT),
		REGISTER_MESSAGE(DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE),
		REGISTER_MESSAGE(DXGI_ERROR_INVALID_CALL),
		REGISTER_MESSAGE(DXGI_ERROR_MORE_DATA),
		REGISTER_MESSAGE(DXGI_ERROR_NAME_ALREADY_EXISTS),
		REGISTER_MESSAGE(DXGI_ERROR_NONEXCLUSIVE),
		REGISTER_MESSAGE(DXGI_ERROR_NOT_CURRENTLY_AVAILABLE),
		REGISTER_MESSAGE(DXGI_ERROR_NOT_FOUND),
		REGISTER_MESSAGE(DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED),
		REGISTER_MESSAGE(DXGI_ERROR_REMOTE_OUTOFMEMORY),
		REGISTER_MESSAGE(DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE),
		REGISTER_MESSAGE(DXGI_ERROR_SDK_COMPONENT_MISSING),
		REGISTER_MESSAGE(DXGI_ERROR_SESSION_DISCONNECTED),
		REGISTER_MESSAGE(DXGI_ERROR_UNSUPPORTED),
		REGISTER_MESSAGE(DXGI_ERROR_WAIT_TIMEOUT),
		REGISTER_MESSAGE(DXGI_ERROR_WAS_STILL_DRAWING)
		})
{}

std::string DxgiMessageMap::operator()(HRESULT hr, bool& bFoundCode) const
{
	bFoundCode = true;
	constexpr int firstColWidth = 25;
	const auto i = map.find(hr);

	std::ostringstream oss;
	if (i != map.end())
	{
		oss << std::left << std::setw(firstColWidth) << i->second << std::right;
	}
	else
	{
		std::ostringstream padss;
		padss << "Unknown message: 0x" << std::hex << hr;
		oss << std::left << std::setw(firstColWidth) << padss.str() << std::right;
		bFoundCode = false;
	}

	oss << std::endl;

	return oss.str();
}